{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMQNaVnISiQrGzAwxfSc96b"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6Kvm99IB6GBb"},"outputs":[],"source":[]},{"cell_type":"code","source":["#EXPERIMENT 4 : Implement and evaluate classification methods like  nearest neighbors, decision trees, and rule-based  classifiers.\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier, export_text\n","from sklearn.metrics import accuracy_score, classification_report\n","# Load dataset\n","df = pd.read_csv(\"movie_dataset.csv\")\n","# Define classification target (Hit = 1, Flop = 0)\n","median_revenue = df['revenue'].median()\n","df['success'] = np.where((df['revenue'] > median_revenue) & (df['vote_average'] >\n","6.5), 1, 0)\n","# Select features\n","features = ['budget', 'popularity', 'vote_average', 'vote_count', 'runtime']\n","df_selected = df[features + ['success']].dropna()\n","# Split dataset (using the full dataset without balancing)\n","X = df_selected[features]\n","y = df_selected['success']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n","random_state=42)\n","# Scale features\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","# Train classifiers\n","knn = KNeighborsClassifier(n_neighbors=5)\n","dt = DecisionTreeClassifier(random_state=42)\n","rule_based = DecisionTreeClassifier(random_state=42, max_depth=3)\n","# Rule-basedusing decision tree rules\n","knn.fit(X_train_scaled, y_train)\n","dt.fit(X_train_scaled, y_train)\n","rule_based.fit(X_train_scaled, y_train)\n","# Predictions\n","y_pred_knn = knn.predict(X_test_scaled)\n","y_pred_dt = dt.predict(X_test_scaled)\n","y_pred_rule = rule_based.predict(X_test_scaled)\n","# Evaluation\n","print(\"KNN Classifier:\")\n","print(classification_report(y_test, y_pred_knn))\n","print(\"Decision Tree Classifier:\")\n","print(classification_report(y_test, y_pred_dt))\n","print(\"Rule-Based Classifier:\")\n","print(classification_report(y_test, y_pred_rule))\n","# Print extracted rules\n","rules = export_text(rule_based, feature_names=features)\n","print(\"Rule-Based Classifier Decision Rules:\")\n","print(rules)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E-zq7y5JumRi","executionInfo":{"status":"ok","timestamp":1746339021103,"user_tz":-330,"elapsed":3222,"user":{"displayName":"000 111","userId":"14195104500313090051"}},"outputId":"7e441394-1702-436c-e06e-2842b14719e2"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["KNN Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.93      0.95      0.94       769\n","           1       0.77      0.71      0.74       192\n","\n","    accuracy                           0.90       961\n","   macro avg       0.85      0.83      0.84       961\n","weighted avg       0.90      0.90      0.90       961\n","\n","Decision Tree Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.96      0.94      0.95       769\n","           1       0.79      0.86      0.82       192\n","\n","    accuracy                           0.93       961\n","   macro avg       0.88      0.90      0.89       961\n","weighted avg       0.93      0.93      0.93       961\n","\n","Rule-Based Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.94      0.98      0.96       769\n","           1       0.92      0.73      0.82       192\n","\n","    accuracy                           0.93       961\n","   macro avg       0.93      0.86      0.89       961\n","weighted avg       0.93      0.93      0.93       961\n","\n","Rule-Based Classifier Decision Rules:\n","|--- vote_average <= 0.38\n","|   |--- class: 0\n","|--- vote_average >  0.38\n","|   |--- popularity <= -0.17\n","|   |   |--- budget <= -0.52\n","|   |   |   |--- class: 0\n","|   |   |--- budget >  -0.52\n","|   |   |   |--- class: 0\n","|   |--- popularity >  -0.17\n","|   |   |--- budget <= -0.53\n","|   |   |   |--- class: 0\n","|   |   |--- budget >  -0.53\n","|   |   |   |--- class: 1\n","\n"]}]}]}