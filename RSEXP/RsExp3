{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMgy03njYhAbtLWLQPY6mid"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jev_UhAf5vai","executionInfo":{"status":"ok","timestamp":1746338838746,"user_tz":-330,"elapsed":1683,"user":{"displayName":"000 111","userId":"14195104500313090051"}},"outputId":"4af08b79-a584-4ea5-f4e6-fb1cb8667310"},"outputs":[{"output_type":"stream","name":"stdout","text":["Processed Dataset (First 15 Rows):\n","                                         title  genres  original_language  \\\n","0                                       Avatar      59                  7   \n","1     Pirates of the Caribbean: At World's End     327                  7   \n","2                                      Spectre      29                  7   \n","3                        The Dark Knight Rises     130                  7   \n","4                                  John Carter      71                  7   \n","5                                 Spider-Man 3     805                  7   \n","6                                      Tangled     396                  7   \n","7                      Avengers: Age of Ultron      71                  7   \n","8       Harry Potter and the Half-Blood Prince     348                  7   \n","9           Batman v Superman: Dawn of Justice      56                  7   \n","10                            Superman Returns     333                  7   \n","11                           Quantum of Solace     245                  7   \n","12  Pirates of the Caribbean: Dead Man's Chest     327                  7   \n","13                             The Lone Ranger      81                  7   \n","14                                Man of Steel      59                  7   \n","\n","    popularity  vote_average  vote_count  director  \n","0     0.171815          0.72    0.858057       887  \n","1     0.158846          0.69    0.327225       771  \n","2     0.122635          0.63    0.324753      1971  \n","3     0.128272          0.76    0.662158       361  \n","4     0.050169          0.61    0.154450        96  \n","5     0.132141          0.59    0.260035      1974  \n","6     0.055600          0.74    0.242147       272  \n","7     0.153360          0.73    0.492074      1180  \n","8     0.112937          0.74    0.384889       532  \n","9     0.177928          0.57    0.509308      2338  \n","10    0.066157          0.54    0.101803       270  \n","11    0.123265          0.61    0.215605      1385  \n","12    0.166572          0.70    0.381472       771  \n","13    0.056016          0.59    0.168048       771  \n","14    0.113522          0.65    0.462405      2338  \n"]}],"source":["#EXPERIMENT 3 :  Perform data preprocessing for a recommender system  dataset.\n","\n","import pandas as pd\n","from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n","\n","# Load dataset\n","df = pd.read_csv('movie_dataset.csv')\n","\n","# ------------------- 1. Handling Missing Values -------------------\n","# Fill missing numerical values with median\n","numerical_cols = ['budget', 'popularity', 'revenue', 'runtime', 'vote_average', 'vote_count']\n","df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].median())\n","\n","# Fill missing categorical values with 'Unknown'\n","categorical_cols = ['genres', 'original_language', 'director']\n","df[categorical_cols] = df[categorical_cols].fillna('Unknown')\n","\n","# ------------------- 2. Encoding Categorical Variables -------------------\n","label_encoders = {}\n","for col in categorical_cols:\n","    label_encoders[col] = LabelEncoder()\n","    df[col] = label_encoders[col].fit_transform(df[col])\n","\n","# ------------------- 3. Normalizing Ratings -------------------\n","scaler = MinMaxScaler()\n","df[['vote_average', 'vote_count', 'popularity']] = scaler.fit_transform(\n","    df[['vote_average', 'vote_count', 'popularity']]\n",")\n","\n","# ------------------- 4. Feature Selection -------------------\n","selected_features = ['title', 'genres', 'original_language', 'popularity', 'vote_average', 'vote_count', 'director']\n","df_selected = df[selected_features]\n","\n","# ------------------- 5. Display Processed Dataset (First 15 Rows) -------------------\n","print(\"Processed Dataset (First 15 Rows):\")\n","print(df_selected.head(15))\n"]}]}