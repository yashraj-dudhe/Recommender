{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNdnNGwKrgLdfJeyFPdbHTu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NpaW87yy5Myg","executionInfo":{"status":"ok","timestamp":1746338720434,"user_tz":-330,"elapsed":929,"user":{"displayName":"000 111","userId":"14195104500313090051"}},"outputId":"c73cf7bd-49ac-4c23-dc44-102e295dd6eb"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Recommendations for 'Inception':\n","Content-Based: ['Interstellar', 'Memento', 'The Prestige', 'Insomnia', 'The Dark Knight Rises']\n","Collaborative Filtering: ['Warm Bodies', 'The Dark Knight Rises', 'The Avengers', 'The Hobbit: An Unexpected Journey', 'Iron Man']\n","Hybrid: ['Memento', 'The Prestige', 'The Hobbit: An Unexpected Journey', 'The Avengers', 'Interstellar']\n"]}],"source":["#EXPERIMENT 2 :  Compare different recommendation techniques  (content-based, collaborative filtering, hybrid).\n","\n","import pandas as pd\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics.pairwise import cosine_similarity\n","from sklearn.decomposition import TruncatedSVD\n","from sklearn.preprocessing import StandardScaler\n","\n","# Load dataset\n","df = pd.read_csv('movie_dataset.csv')\n","\n","# Check required columns\n","required_columns = {'title', 'genres', 'director', 'popularity', 'vote_average', 'vote_count'}\n","if not required_columns.issubset(df.columns):\n","    raise ValueError(f\"Dataset must contain {required_columns} columns.\")\n","\n","# Fill missing values\n","df['genres'] = df['genres'].fillna('')\n","df['director'] = df['director'].fillna('')\n","df['features'] = df['genres'] + ' ' + df['director']\n","\n","# ---------------------- Content-Based Filtering ----------------------\n","vectorizer = TfidfVectorizer(stop_words='english')\n","tfidf_matrix = vectorizer.fit_transform(df['features'])\n","cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\n","\n","def get_content_based_recommendations(title, df, cosine_sim, top_n=5):\n","    indices = pd.Series(df.index, index=df['title']).drop_duplicates()\n","    idx = indices.get(title)\n","    if idx is None:\n","        return []\n","    sim_scores = list(enumerate(cosine_sim[idx]))\n","    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:top_n+1]\n","    movie_indices = [i[0] for i in sim_scores]\n","    return df['title'].iloc[movie_indices].tolist()\n","\n","# ---------------------- Collaborative Filtering ----------------------\n","collab_df = df[['popularity', 'vote_average', 'vote_count']].fillna(0)\n","scaler = StandardScaler()\n","collab_df_scaled = scaler.fit_transform(collab_df)\n","\n","svd = TruncatedSVD(n_components=3, random_state=42)\n","collab_matrix = svd.fit_transform(collab_df_scaled)\n","collab_cosine_sim = cosine_similarity(collab_matrix)\n","\n","def get_collaborative_recommendations(title, df, collab_cosine_sim, top_n=5):\n","    indices = pd.Series(df.index, index=df['title']).drop_duplicates()\n","    idx = indices.get(title)\n","    if idx is None:\n","        return []\n","    sim_scores = list(enumerate(collab_cosine_sim[idx]))\n","    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:top_n+1]\n","    movie_indices = [i[0] for i in sim_scores]\n","    return df['title'].iloc[movie_indices].tolist()\n","\n","# ---------------------- Hybrid Recommendation System ----------------------\n","def get_hybrid_recommendations(title, df, cosine_sim, collab_cosine_sim, top_n=5):\n","    content_recs = get_content_based_recommendations(title, df, cosine_sim, top_n)\n","    collab_recs = get_collaborative_recommendations(title, df, collab_cosine_sim, top_n)\n","    hybrid_recs = list(set(content_recs + collab_recs))\n","    return hybrid_recs[:top_n]\n","\n","# ---------------------- Performance Comparison ----------------------\n","def evaluate_recommendation_system(title, df, cosine_sim, collab_cosine_sim):\n","    print(f\"\\nRecommendations for '{title}':\")\n","    print(f\"Content-Based: {get_content_based_recommendations(title, df, cosine_sim)}\")\n","    print(f\"Collaborative Filtering: {get_collaborative_recommendations(title, df, collab_cosine_sim)}\")\n","    print(f\"Hybrid: {get_hybrid_recommendations(title, df, cosine_sim, collab_cosine_sim)}\")\n","\n","# ---------------------- Example Usage ----------------------\n","movie_title = 'Inception'\n","evaluate_recommendation_system(movie_title, df, cosine_sim, collab_cosine_sim)\n"]}]}