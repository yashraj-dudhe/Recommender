{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOQNZEkK6OuXHtnXehId6zA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"2egi5VEL8qU4"},"outputs":[],"source":[]},{"cell_type":"code","source":["#EXPERIMENT 9 : Conduct offline experiments to test recommendation  algorithms using historical data\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","from sklearn.model_selection import train_test_split\n","\n","# Load datasets\n","users = pd.read_excel('Users.xlsx')\n","books = pd.read_excel('Books.xlsx')\n","ratings = pd.read_excel('Ratings.xlsx')\n","\n","# Filter out implicit feedback (ratings of 0)\n","ratings = ratings[ratings['Ratings'] > 0]\n","\n","# Create a user-item matrix\n","user_item_matrix = ratings.pivot(index='User_id', columns='ISBN', values='Ratings').fillna(0)\n","\n","# Split data into training and test sets\n","train_data, test_data = train_test_split(ratings, test_size=0.2, random_state=42)\n","\n","# Train a k-NN model for collaborative filtering\n","knn_model = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=6)\n","knn_model.fit(user_item_matrix)\n","\n","# Function to get top N recommendations for a user\n","def get_top_n_recommendations(user_id, books_df, n=2):\n","    if user_id not in user_item_matrix.index:\n","        print(\"User ID not found, returning random top-rated books.\")\n","        top_books = books_df.sample(n=n)\n","        return [(book, 5.0) for book in top_books['Title'].values]\n","\n","    # Find the user's index\n","    user_index = user_item_matrix.index.get_loc(user_id)\n","    user_data = user_item_matrix.iloc[user_index].values.reshape(1, -1)\n","\n","    # Get nearest neighbors\n","    distances, indices = knn_model.kneighbors(user_data, n_neighbors=n+1)\n","\n","    recommended_books = []\n","    for i in range(1, n+1):  # Skip the user itself (i=0)\n","        similar_user_id = user_item_matrix.index[indices[0][i]]\n","        top_rated_book = ratings[ratings['User_id'] == similar_user_id].sort_values(by='Ratings', ascending=False).iloc[0]\n","        book_title = books_df[books_df['ISBN'] == top_rated_book['ISBN']]['Title'].values[0]\n","        recommended_books.append((book_title, top_rated_book['Ratings']))\n","\n","    return recommended_books\n","\n","# Example usage for a specific user\n","user_id = 1\n","top_books = get_top_n_recommendations(user_id, books, n=2)\n","\n","# Print recommended books\n","print(\"\\nRecommended Books:\")\n","for book, rating in top_books:\n","    print(f\"{book} (Predicted Rating: {rating:.2f})\")\n","\n","# Evaluate model performance using RMSE and MAE\n","predicted_ratings = []\n","true_ratings = []\n","\n","for _, row in test_data.iterrows():\n","    user_id = row['User_id']\n","    isbn = row['ISBN']\n","    true_rating = row['Ratings']\n","\n","    if user_id in user_item_matrix.index:\n","        recommended_books = get_top_n_recommendations(user_id, books, n=1)\n","        predicted_rating = recommended_books[0][1]  # Get the predicted rating of the top recommended book\n","    else:\n","        predicted_rating = user_item_matrix.mean().mean()  # Default to average rating for users with no data\n","\n","    predicted_ratings.append(predicted_rating)\n","    true_ratings.append(true_rating)\n","\n","# Calculate RMSE and MAE\n","rmse = np.sqrt(mean_squared_error(true_ratings, predicted_ratings))\n","mae = mean_absolute_error(true_ratings, predicted_ratings)\n","\n","# Print model performance metrics\n","print(f\"\\nModel Performance:\\nRMSE: {rmse:.2f}, MAE: {mae:.2f}\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EN44MJmd0dJK","executionInfo":{"status":"ok","timestamp":1746339613461,"user_tz":-330,"elapsed":2974,"user":{"displayName":"000 111","userId":"14195104500313090051"}},"outputId":"d467d8b9-456e-4243-ef7f-8ce7bef20cd9"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Recommended Books:\n","Book A (Predicted Rating: 3.00)\n","Book C (Predicted Rating: 3.00)\n","\n","Model Performance:\n","RMSE: 2.12, MAE: 1.50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but NearestNeighbors was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but NearestNeighbors was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but NearestNeighbors was fitted with feature names\n","  warnings.warn(\n"]}]}]}